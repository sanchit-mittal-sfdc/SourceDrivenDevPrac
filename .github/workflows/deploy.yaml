name: Salesforce Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          
      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version          

      - name: Install sfdx-git-delta
        run: npm install -g sfdx-git-delta

      - name: Identify delta changes
        id: sgd-delta
        run: |
          git fetch origin main:refs/remotes/origin/main
          sfdx sgd:source:delta --to "HEAD" --from "origin/main" --output . --generate-delta

      - name: Install PMD
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.38.0/pmd-bin-6.38.0.zip
          unzip pmd-bin-6.38.0.zip -d pmd-bin

      - name: Install Salesforce Scanner CLI
        run: sfdx plugins:install @salesforce/sfdx-scanner

      - name: Run Salesforce Scanner CLI
        run: |
          sfdx scanner:run --target force-app/main/default --format json --outputdir scanner-results
          if grep -q "\"violations\"" scanner-results/results.json; then
            echo "Salesforce Scanner found security vulnerabilities or code issues:"
            cat scanner-results/results.json
            exit 1
          else
            echo "No security vulnerabilities or code issues found by Salesforce Scanner."
          fi

      - name: Authenticate with Salesforce
        env:
          SFDX_CLIENT_ID: ${{ secrets.SFDC_CONSUMER_KEY }}
          SFDX_JWT_KEY_FILE: ./server.key
          SFDX_USERNAME: ${{ secrets.SFDC_USERNAME }}
        run: sfdx force:auth:jwt:grant --clientid $SFDX_CLIENT_ID --jwtkeyfile $SFDX_JWT_KEY_FILE --username $SFDX_USERNAME --setdefaultdevhubusername -a DevHub

      - name: Run Apex Tests
        env:
          SFDX_USERNAME: ${{ secrets.SFDC_USERNAME }}
        run: |
          sfdx force:apex:test:run -u $SFDX_USERNAME --resultformat human --codecoverage --outputdir test-results --wait 10
          if grep -q "Fail" test-results/test-result-*.json; then
            echo "Some Apex tests failed:"
            cat test-results/test-result-*.json
            exit 1
          else
            echo "All Apex tests passed successfully."
          fi

      - name: Check Code Coverage
        run: |
          COVERAGE=$(jq '.result.summary.coverage.coveredPercent' test-results/test-result-*.json)
          if (( $(echo "$COVERAGE < 75" | bc -l) )); then
            echo "Code coverage is below 75%: $COVERAGE"
            exit 1
          else
            echo "Code coverage is sufficient: $COVERAGE"
          fi

      - name: Deploy delta changes to Salesforce Org
        env:
          SFDX_USERNAME: ${{ secrets.SFDC_USERNAME }}
        run: |
          if [ -f ".sgd/package/package.xml" ]; then
            sfdx force:source:deploy -x .sgd/package/package.xml -u $SFDX_USERNAME
          else
            echo "No changes detected."
          fi

      - name: Cleanup
        run: |
          rm -rf ~/sfdx
          rm sfdx-linux-x64.tar.xz
          rm -rf .sgd
          rm -rf pmd-bin
          rm pmd-bin-6.38.0.zip
          rm -rf scanner-results

  validate:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Salesforce CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version          

      - name: Install sfdx-git-delta
        run: npm install -g sfdx-git-delta

      - name: Identify delta changes
        id: sgd-delta
        run: |
          git fetch origin main:refs/remotes/origin/main
          sfdx sgd:source:delta --to "HEAD" --from "origin/main" --output . --generate-delta

      - name: Install Salesforce Scanner CLI
        run: sfdx plugins:install @salesforce/sfdx-scanner

      - name: Run Salesforce Scanner CLI
        run: |
          sfdx scanner:run --target force-app/main/default --format json --outputdir scanner-results
          if grep -q "\"violations\"" scanner-results/results.json; then
            echo "Salesforce Scanner found security vulnerabilities or code issues:"
            cat scanner-results/results.json
            exit 1
          else
            echo "No security vulnerabilities or code issues found by Salesforce Scanner."
          fi

      - name: Authenticate with Salesforce
        env:
          SFDX_CLIENT_ID: ${{ secrets.SFDC_CONSUMER_KEY }}
          SFDX_JWT_KEY_FILE: ./server.key
          SFDX_USERNAME: ${{ secrets.SFDC_USERNAME }}
        run: sfdx force:auth:jwt:grant --clientid $SFDX_CLIENT_ID --jwtkeyfile $SFDX_JWT_KEY_FILE --username $SFDX_USERNAME --setdefaultdevhubusername -a DevHub

      - name: Run Apex Tests
        env:
          SFDX_USERNAME: ${{ secrets.SFDC_USERNAME }}
        run: |
          sfdx force:apex:test:run -u $SFDX_USERNAME --resultformat human --codecoverage --outputdir test-results --wait 10
          if grep -q "Fail" test-results/test-result-*.json; then
            echo "Some Apex tests failed:"
            cat test-results/test-result-*.json
            exit 1
          else
            echo "All Apex tests passed successfully."
          fi

      - name: Check Code Coverage
        run: |
          COVERAGE=$(jq '.result.summary.coverage.coveredPercent' test-results/test-result-*.json)
          if (( $(echo "$COVERAGE < 75" | bc -l) )); then
            echo "Code coverage is below 75%: $COVERAGE"
            exit 1
          else
            echo "Code coverage is sufficient: $COVERAGE"
          fi

      - name: Validate delta changes in Salesforce Org
        env:
          SFDX_USERNAME: ${{ secrets.SFDC_USERNAME }}
        run: |
          if [ -f ".sgd/package/package.xml" ]; then
            sfdx force:source:deploy -x .sgd/package/package.xml -u $SFDX_USERNAME --checkonly
          else
            echo "No changes detected."
          fi

      - name: Cleanup
        run: |
          rm -rf ~/sfdx
          rm sfdx-linux-x64.tar.xz
          rm -rf .sgd
          rm -rf pmd-bin
          rm pmd-bin-6.38.0.zip
          rm -rf scanner-results
